@page "/todos"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@inject IHttpClientFactory _httpClientFactory
@inject TokenModel _tokenInfo
@rendermode InteractiveServer

<h3>ToDoList</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <h5>@errorMessage</h5>
}

@if (todos is not null)
{
    @foreach (var todo in todos)
    {
        <div>
            <h4>@todo.Title</h4>
            @if (@todo.IsComplete)
            {
                <p>Completed</p>
            }
            else
            {
                <button class="btn btn-sm btn-primary" @onclick="() => MarkAsCompleted(todo)">Mark as Completed</button>
            }
        </div>
    }
}
else
{
    <h5>Loading...</h5>
}

@code {
    HttpClient? _httpClient;
    List<TodoModel>? todos;
    string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = _httpClientFactory.CreateClient("apiClient");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _tokenInfo.Token);

        errorMessage = string.Empty;
        try
        {
            todos = await _httpClient.GetFromJsonAsync<List<TodoModel>>("api/todos");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async void MarkAsCompleted(TodoModel todo)
    {
        errorMessage = string.Empty;
        try
        {
            var response = await _httpClient!.PutAsJsonAsync<string>($"api/todos/{todo.Id}/complete", "");
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Failed to mark as completed";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        todo.IsComplete = true;
        await InvokeAsync(StateHasChanged);
    }
}
